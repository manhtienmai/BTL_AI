# -*- coding: utf-8 -*-
"""Eating All The Dots

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p71VVXMRn2jmUZLal6at2hmxMt6Y3DrP
"""

# cau 7
 def cornersHeuristic(state: Any, problem: CornersProblem):
    """
    A heuristic for the CornersProblem that you defined.

      state:   The current search state
               (a data structure you chose in your search problem)

      problem: The CornersProblem instance for this layout.

    This function should always return a number that is a lower bound on the
    shortest path from the state to a goal of the problem; i.e.  it should be
    admissible (as well as consistent).
    """
    corners = problem.corners # These are the corner coordinates
    walls = problem.walls # These are the walls of the maze, as a Grid (game.py)
    "*** YOUR CODE HERE ***"
    pacman_position = state[0]
    visited_corners = state[1]
    def manhattanDistance(point1, point2):
        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])

    min_distance = float('inf')
    for corner in corners:
        if corner not in visited_corners:
            distance = manhattanDistance(pacman_position, corner)
            if distance < min_distance:
                min_distance = distance

    if min_distance == float('inf'):
        return 0
    else:
        return min_distance
    # return 0 # Default to trivial solution